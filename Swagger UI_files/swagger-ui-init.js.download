
window.onload = function() {
  // Build a system
  var url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  var options = {
  "swaggerDoc": {
    "info": {
      "title": "Telescope API",
      "version": "1.0.0"
    },
    "basePath": "/dev/",
    "securityDefinitions": {
      "Bearer": {
        "type": "apiKey",
        "description": "API authorization token",
        "name": "Authorization",
        "in": "header"
      }
    },
    "security": [
      {
        "Bearer": []
      }
    ],
    "swagger": "2.0",
    "paths": {
      "/public/airdrops": {
        "get": {
          "tags": [
            "public"
          ],
          "summary": "Get list of all drops",
          "description": "Return a list of filtered airdrops",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of items - 20, default - 20",
              "required": false,
              "type": "number",
              "example": 20
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of items to skip, default - 0",
              "required": false,
              "type": "number",
              "example": 40
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Field to sort, default - endTime",
              "required": false,
              "type": "string",
              "enum": [
                "endTime",
                "name",
                "participantsAmount",
                "startTime"
              ],
              "example": "endTime"
            },
            {
              "name": "sortOrder",
              "in": "query",
              "description": "Sorting order, default - asc",
              "required": false,
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "example": "desc"
            }
          ],
          "security": [
            []
          ],
          "responses": {
            "200": {
              "description": "Array of airdrops",
              "schema": {
                "type": "object",
                "required": [
                  "status",
                  "data"
                ],
                "properties": {
                  "status": {
                    "$ref": "#/definitions/ApiResponseOK"
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "airdrops"
                    ],
                    "properties": {
                      "airdrops": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/AirDrop"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Here will be description later!!!",
              "schema": {
                "$ref": "#/definitions/ApiResponseBadRequest"
              }
            }
          }
        }
      },
      "/public/airdrops/{airdrop_id}": {
        "get": {
          "tags": [
            "public"
          ],
          "summary": "Get one AirDrop",
          "description": "Return specific AirDrop by given id",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "airdrop_id",
              "in": "path",
              "description": "AirDrop ID",
              "required": true,
              "type": "string",
              "example": "641a0e6295a9ada6271b0358"
            }
          ],
          "security": [
            []
          ],
          "responses": {
            "200": {
              "description": "Object with selected Airdrop data",
              "schema": {
                "type": "object",
                "required": [
                  "status",
                  "data"
                ],
                "properties": {
                  "status": {
                    "$ref": "#/definitions/ApiResponseOK"
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "airdrop"
                    ],
                    "properties": {
                      "airdrop": {
                        "$ref": "#/definitions/AirDrop"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Here will be description later!!!",
              "schema": {
                "$ref": "#/definitions/ApiResponseBadRequest"
              }
            },
            "404": {
              "description": "The requested data was not found",
              "schema": {
                "$ref": "#/definitions/ApiResponseNotFound"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "ApiResponseOK": {
        "type": "string",
        "example": "success"
      },
      "ApiResponseNotFound": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "data": {
            "type": "string",
            "example": "Object not found"
          }
        }
      },
      "ApiResponseBadRequest": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          }
        }
      },
      "AirDrop": {
        "type": "object",
        "required": [
          "_id",
          "id",
          "chainId",
          "description",
          "endTime",
          "item",
          "name",
          "participantsAmount",
          "startTime",
          "status",
          "taskAmount",
          "thumbnail"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId",
            "example": "66900cbcdcfeb53769b9e5a8"
          },
          "id": {
            "type": "string",
            "example": 905250114373185500
          },
          "chainId": {
            "type": "string",
            "example": 137
          },
          "description": {
            "type": "string",
            "description": "json object",
            "example": "{\"type\":\"DRAFT_JS_RAW\",\"data\":{\"blocks\":[{\"key\":\"5ngtu\",\"text\":\"The L1 powering Apps through DePin\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ba7mg\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9lsfc\",\"text\":\"$KAI and you\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":4,\"key\":0}],\"data\":{}},{\"key\":\"eok78\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b70ci\",\"text\":\"Letâ€™s make supercomputing accessible and affordable\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{\"0\":{\"type\":\"LINK\",\"mutability\":\"MUTABLE\",\"data\":{\"href\":\"https://twitter.com/search?q=%24KAI&src=cashtag_click\",\"url\":\"https://twitter.com/search?q=%24KAI&src=cashtag_click\"}}}}}"
          },
          "endTime": {
            "type": "integer",
            "format": "int64",
            "description": "timestamp",
            "example": 1707638400
          },
          "item": {
            "type": "object",
            "description": "Unknown structure",
            "example": {}
          },
          "name": {
            "type": "string",
            "example": "Micro3"
          },
          "participantsAmount": {
            "type": "integer",
            "example": 1260
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "description": "timestamp",
            "example": 1706432400
          },
          "status": {
            "type": "integer",
            "example": 300
          },
          "taskAmount": {
            "type": "integer",
            "example": 8
          },
          "thumbnail": {
            "type": "string",
            "example": "https://s3.ap-northeast-1.amazonaws.com/quest3.xyz/community/905249412708475321.jpg"
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "tags": [
      {
        "name": "public",
        "description": "Public endpoints(without token)"
      }
    ]
  },
  "customOptions": {}
};
  url = options.swaggerUrl || url
  var urls = options.swaggerUrls
  var customOptions = options.customOptions
  var spec1 = options.swaggerDoc
  var swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (var attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  var ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.oauth) {
    ui.initOAuth(customOptions.oauth)
  }

  if (customOptions.preauthorizeApiKey) {
    const key = customOptions.preauthorizeApiKey.authDefinitionKey;
    const value = customOptions.preauthorizeApiKey.apiKeyValue;
    if (!!key && !!value) {
      const pid = setInterval(() => {
        const authorized = ui.preauthorizeApiKey(key, value);
        if(!!authorized) clearInterval(pid);
      }, 500)

    }
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }

  window.ui = ui
}
